import serial
import numpy as np
import matplotlib.pyplot as plt

# Function to perform FFT and return dominant frequency
def get_dominant_frequency(data, sampling_rate):
    fft_values = np.fft.fft(data)
    frequencies = np.fft.fftfreq(len(data), 1/sampling_rate)
    # Discard negative frequencies
    positive_freq_mask = frequencies > 0
    positive_frequencies = frequencies[positive_freq_mask]
    positive_fft_values = fft_values[positive_freq_mask]
    # Find index of maximum FFT value
    max_index = np.argmax(np.abs(positive_fft_values))
    # Get dominant frequency
    dominant_frequency = positive_frequencies[max_index]
    return dominant_frequency

# Establish serial connection to Arduino
ser = serial.Serial('COM3', 9600)  # Adjust COM port and baud rate as needed

# Set up parameters
sampling_rate = 1000  # Adjust sampling rate based on your Arduino code
max_buffer_size = 1024  # Maximum buffer size

# Initialize empty buffer
buffer = []

# Main loop
while True:
    # Read data from Arduino
    line = ser.readline().strip().decode()
    # Convert data to float
    value = float(line)
    # Append new value to buffer
    buffer.append(value)
    # Ensure buffer does not exceed max size
    if len(buffer) > max_buffer_size:
        buffer.pop(0)  # Remove oldest value if buffer exceeds max size
    # Check if buffer has enough data for FFT
    if len(buffer) >= max_buffer_size:
        # Perform FFT and get dominant frequency
        dominant_frequency = get_dominant_frequency(buffer, sampling_rate)
        print("Dominant Frequency:", dominant_frequency, "Hz")

# Close serial connection
ser.close()
